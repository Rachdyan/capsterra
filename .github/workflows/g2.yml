name: G2 Scrape
on:
  workflow_dispatch:
  #schedule:
  #  - cron: '30 12 * * 1-5' # 7:30 PM Jakarta Time

jobs:
  build:
    env:
      PY_COLORS: "1"
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.13"]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade pip
        pip install --upgrade wheel
        pip install -r requirements.txt
        pip install --upgrade pyautogui

    - name: Install Chrome
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt install google-chrome-stable

    - name: Check the console scripts interface
      run: |
        seleniumbase
        sbase
    - name: Install chromedriver
      run: |
        seleniumbase install chromedriver

    - name: Make sure pytest is working
      run: |
        echo "def test_1(): pass" > nothing.py
        pytest nothing.py --uc
    - name: Check which Chrome binaries exist
      run: |
        python -c "import os; print(os.path.exists('/usr/bin/google-chrome'))"
        python -c "import os; print(os.path.exists('/bin/google-chrome-stable'))"
        python -c "import os; print(os.path.exists('/bin/chromium-browser'))"
        python -c "import os; print(os.path.exists('/bin/chromium'))"
    - name: Display Chrome binary that's used
      run: |
        python -c "from seleniumbase.core import detect_b_ver; print(detect_b_ver.get_binary_location('google-chrome'))"
        python -c "from seleniumbase import undetected; print(undetected.find_chrome_executable())"
    - name: Make sure pytest with sb is working
      run: |
        echo "def test_0(sb): pass" > verify_sb.py
        pytest verify_sb.py
    - name: Run scrape_g2.py
      env:
        PROXY_USER: ${{ secrets.PROXY_USER }}
        PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
        PROXY_HOST: ${{ secrets.PROXY_HOST }}
        PROXY_PORT: ${{ secrets.PROXY_PORT }}
      run: |
        python scrape_g2.py --debug

    - name: Commit and push results
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add result/
        git commit -m "Update result files from workflow" || echo "No changes to commit"
        git push